- name: Initialize facts
  ansible.builtin.set_fact:
    update: []
    replace: []
    delete: []
    cacheable: true

- name: Check if 'ENV' environment var is set
  ansible.builtin.set_fact:
    env: "{{ lookup('env', 'ENV') | default('') }}"
  failed_when: env == ''

- name: Get data from SRlinux device
  nokia.srlinux.get:
    paths:
      - path: /
        datastore: running
      - path: /platform/control[slot=A]/software-version
        datastore: state
      - path: /system/lldp/interface[name=*]/neighbor
        datastore: state
  register: res
  when: platform == 'srlinux'

- name: Get data from SROS device
  ansible.netcommon.netconf_get:
    filter: <state xmlns="urn:nokia.com:sros:ns:yang:sr:state"><system><platform/><version/><lldp/></system></state>
    display: native
  register: sros_res
  when: platform == 'sros'

- name: Get data from SROS device
  ansible.netcommon.netconf_get:
    source: running
    filter: <configure xmlns="urn:nokia.com:sros:ns:yang:sr:conf"/>
    display: native
  register: sros_res2
  when: platform == 'sros'

#- name: DEBUG print current config
#  ansible.builtin.debug:
#    var: res['result'][0]
#  when: platform == 'srlinux'

#- name: DEBUG print current config
#  ansible.builtin.debug:
#    var: sros_res2.output.data.configure
#  when: platform == 'sros'

- name: Set facts for device
  ansible.builtin.set_fact:
    running_config: "{{ res['result'][0] }}"
    sw_version: "{{ res['result'][1].split('-')[0] }}"
    lldp_nbrs: "{{ (res.result[2].interface | default([])) | items2dict(key_name='name', value_name='neighbor') }}"
  when: platform == 'srlinux'

- name: Set facts for device
  ansible.builtin.set_fact:
    running_config: "{{ sros_res2.output.data.configure }}"
    sw_version: "{{ sros_res.output.data.state.system.version['version-number'] }}"
    lldp_nbrs: {}
  when: platform == 'sros'

- name: Check SR Linux version
  ansible.builtin.assert:
    that:
      - sw_version | ansible.builtin.regex_search('^v(\\d+\\.\\d+)', '\\1') | first is ansible.builtin.version('23.3', '>=')
    fail_msg: "Minimal SR Linux version is 23.3.1. Please upgrade your switches first"
  when: platform == 'srlinux'

- name: Check SROS version
  ansible.builtin.assert:
    that:
      - sw_version | ansible.builtin.regex_search('^[A-Z]-(\\d+\\.\\d+)', '\\1') | first is ansible.builtin.version('21.10', '>=')
    fail_msg: "Minimal SROS version is 21.10.R1. Please upgrade your switches first"
  when: platform == 'sros'
