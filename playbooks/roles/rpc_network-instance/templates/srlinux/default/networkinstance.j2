#jinja2: lstrip_blocks: "True"
{% for ni, prop in network_instance.items() %}
{% if prop._state|default('present') != 'deleted' %}
- path: /network-instance[name={{ni}}]
  operation: replace
  value:
    admin-state: enable
    {% if prop.description is defined %}
    description: {{ prop.description }}
    {% endif %}
    {% if prop.type is defined %}
    type: {{ prop.type }}
    {% endif %}
    {% if prop.type|default('default') == 'default' %}
    ip-forwarding:
      receive-ipv4-check: {{ prop["receive-ipv4-check"] | default(True) }}
      receive-ipv6-check: {{ prop["receive-ipv6-check"] | default(True) }}
    {% endif %}
    {% if prop.interfaces is defined and prop.interfaces is not none %}
    interface:
      {% for itf in prop.interfaces %} 
      - name: {{ itf }}
      {% endfor %}
    {% endif %}
    {% if prop.vxlan_interface is defined and prop.vxlan_interface is not none %}
    vxlan-interface:
      {% for vxlan_itf in prop.vxlan_interface %}
      - name: {{ vxlan_itf }}
      {% endfor %}
    {% endif %}
    {% if prop.type | default('default') == 'mac-vrf' %}
    bridge-table:
      mac-learning:
        admin-state: {{ prop["mac_learning"]["admin_state"] | default("enable") }}
        aging:
          age-time: {{ prop["mac_learning"]["age_time"] | default((300)) }}
      mac-limit:
        maximum-entries: {{ prop["mac_limit"] | default(250) }}
      mac-duplication:
        action: {{ prop["mac_duplication"]["action"] | default("stop-learning") }}
        hold-down-time: {{ prop["mac_duplication"]["hold_down_time"] | default((9)) }}
        monitoring-window: {{ prop["mac_duplication"]["mon_window"] | default((3)) }}
        num-moves: {{ prop["mac_duplication"]["num_moves"] | default((5)) }}
      {% set irb_itfs = prop.interfaces | select('match', 'irb') %}
      {% if not irb_itfs %}
      proxy-arp:
        admin-state: {{ prop["proxy_arp"]["admin_state"] | default("disable") }}
        dynamic-learning: 
          admin-state: {{ prop["proxy_arp"]["admin_state"] | default("disable") }}
          age-time: {{ prop["proxy_arp"]["age_time"] | default('never') }}
        ip-duplication:
          hold-down-time: {{ prop["ip_duplication"]["hold_down_time"] | default((9)) }}
          monitoring-window: {{ prop["ip_duplication"]["mon_window"] | default((3)) }}
          num-moves: {{ prop["ip_duplication"]["num_moves"] | default((5)) }}
      {% endif %}
    {% endif %}    
    {% if prop.protocols is defined and prop.protocols is not none %}
    protocols:
      {% if prop.protocols.bgp_evpn is defined %}
      bgp-evpn:
        bgp-instance:
          - id: 1
            admin-state: enable
            vxlan-interface: {{ prop.protocols.bgp_evpn.vxlan_interface }}
            evi: {{ prop.protocols.bgp_evpn.evi }}
            ecmp: 4
        {% if prop["proxy_arp"]["admin_state"] | default("disable") == "enable" %}
            routes:
              bridge-table:
                mac-ip:
                  advertise-arp-nd-only-with-mac-table-entry: true
        {% endif %}
      {% endif %}
      {% if prop.protocols.bgp_vpn is defined %}
      bgp-vpn:
        bgp-instance:
          - id: 1
            route-target:
              export-rt: "target:{{prop.protocols.bgp_vpn.export_rt}}"
              import-rt: "target:{{prop.protocols.bgp_vpn.import_rt}}"
      {% endif %}
      {% if prop.protocols.bgp is defined %}
      bgp:
        {% if prop.type|default('routed') != 'bridged' %}
        autonomous-system: {{ prop["autonomous-system"] }}
        router-id: {{ prop["router-id"] }}
        {% endif %}
        ebgp-default-policy:
          export-reject-all: {{ prop.protocols.bgp["ebgp-export-reject"] | default(False) }}
          import-reject-all: {{ prop.protocols.bgp["ebgp-import-reject"] | default(False) }}
        route-advertisement:
          rapid-withdrawal: {{ prop.protocols.bgp["route-advertisement"]["rapid-withdrawal"] | default (true) }}
        {% if prop.protocols.bgp.dynamic is defined %}
        dynamic-neighbors:
          interface:
          {% for nbr_itf, nbr_prop in prop.protocols.bgp.dynamic.interfaces.items() %} 
          - allowed-peer-as: {{ nbr_prop["allow-as"] }}
            interface-name: {{ nbr_itf }}
            peer-group: {{ nbr_prop["peer-group"] }}
          {% endfor %}
        {% endif %}
        afi-safi:
        {% if prop.protocols.bgp.ipv4 is defined %}
          - afi-safi-name: "ipv4-unicast"
            admin-state: {{ prop.protocols.bgp.ipv4.admin_state|default('disable') }}
            multipath:
              allow-multiple-as: true
              maximum-paths: {{prop.protocols.bgp.ipv4.multipath|default(64) }}
        {% endif %}
        {% if prop.protocols.bgp.ipv6 is defined %}
          - afi-safi-name: "ipv6-unicast"
            admin-state: {{ prop.protocols.bgp.ipv6.admin_state|default('disable') }}
            multipath:
              allow-multiple-as: true
              maximum-paths: {{prop.protocols.bgp.ipv6.multipath|default(64) }}
           {% if prop.protocols.bgp.ipv6.ipv4 is defined %}
            ipv4-unicast:
               advertise-ipv6-next-hops: {{ prop.protocols.bgp.ipv6.ipv4["advertise-ipv6-next-hops"] | default(false) }}
               receive-ipv6-next-hops: {{ prop.protocols.bgp.ipv6.ipv4["receive-ipv6-next-hops"] | default(false) }}
           {% endif %}
        {% endif %}
        {% if prop.protocols.bgp.evpn is defined %}
          - afi-safi-name: evpn
            {% if prop.protocols.bgp.evpn.admin_state is defined %}
            admin-state: enable
            {% endif %}
            multipath:
              maximum-paths: {{prop.protocols.bgp.evpn.multipath|default(64) }}
            evpn:
              rapid-update: {{ prop.protocols.bgp.evpn["rapid-update"] | default (true) }}
              inter-as-vpn: {{ prop.protocols.bgp.evpn["inter-as-vpn"] | default (false) }}
        {% endif %}
        send-community:
          large: {{ prop.protocols.bgp["large-community"] | default(true) }}
        transport:
           mtu-discovery: {{ prop.protocols.bgp["mtu-discovery"] | default(true) }}
        group:
        {% for group, group_spec in prop.protocols.bgp.group.items() %}
        - group-name: {{ group }}
          {% if group_spec.description is defined %}
          description: {{ group_spec.description }}
          {% endif %}
          {% if group_spec.peer_as is defined %}
          peer-as: {{ group_spec.peer_as }}
          {% endif %}
          {% if group_spec.next_hop_self is defined %}
          next-hop-self: {{ group_spec.next_hop_self }}
          {% endif %}
          failure-detection:
            enable-bfd: {{ group_spec.enable_bfd | default(False) }}
            fast-failover: {{ group_spec.fast_failover | default(False) }}
          {% if group_spec.export_policy is defined %}
          export-policy: [{{ group_spec.export_policy }}]
          {% endif %}
          {% if group_spec.import_policy is defined %}
          import-policy: [{{ group_spec.import_policy }}]
          {% endif %}
          send-community:
            large: {{ group_spec["large-community"] | default(true) }}
          {% if 'ipv4' in group_spec or 'ipv6' in group_spec or 'evpn' in group_spec %}
          afi-safi:
            {% if 'ipv4' in group_spec %}
            - afi-safi-name: "ipv4-unicast" 
              admin-state: {{ group_spec.ipv4.admin_state|default('disable') }}
            {% endif %}
            {% if 'ipv6' in group_spec %}
            - afi-safi-name: "ipv6-unicast" 
              admin-state: {{ group_spec.ipv6.admin_state|default('disable') }}
            {% endif %}
            {% if 'evpn' in group_spec %}
            - afi-safi-name: "evpn" 
              admin-state: {{ group_spec.evpn.admin_state|default('disable') }}
            {% endif %}
          {% endif %}
          {% if group_spec.local_as is defined %}
          local-as:
            as-number: {{ group_spec.local_as }}
             {% if group_spec.prepend_global_as is defined %}
            prepend-global-as: {{ group_spec.prepend_global_as }}
             {% endif %}
          {% endif %}
          {% if group_spec.local_address is defined %}
          transport:
            local-address: {{ group_spec.local_address }}
          {% endif %}
          {% if group_spec.cluster_id is defined %}
          route-reflector:
            client: true
            cluster-id: {{ group_spec.cluster_id }}
          {% endif %}
          timers:
            connect-retry: {{ group_spec.timers["connect-retry"] | default(10) }}
            hold-time: {{ group_spec.timers["hold-time"] | default(3) }}
            keepalive-interval: {{ group_spec.timers["keepalive-interval"] | default(1) }}
            minimum-advertisement-interval: {{ group_spec.timers["minimum-advertisement-interval"] | default(1) }}
        {% endfor %}
        {% if prop.protocols.bgp.neighbor is defined %}
        neighbor:
           {% for nbr, nbr_spec in prop.protocols.bgp.neighbor.items() %}
        - peer-address: {{ nbr }}
          peer-group: {{ nbr_spec.peer_group }}
             {% if nbr_spec.peer_as is defined %}
          peer-as: {{ nbr_spec.peer_as }}
             {% endif %}
           {% else %}
          []
           {% endfor %}
         {% endif %}
      {% endif %}
      {% if prop.protocols.ospf is defined %}
      ospf:
        instance:
        {% for instance, instance_spec in prop.protocols.ospf.items() %}
        - name: {{ instance }}
          admin-state: enable
          router-id: {{ prop["router-id"] }}
          version: {{ instance_spec.version }}
          max-ecmp-paths: {{ instance_spec["max-ecmp-paths"] | default(8) }}
          export-policy: [{{ instance_spec.export_policy }}]
          {% if instance_spec.timers is defined %}
          timers:
            incremental-spf-wait: {{ instance_spec.timers["incremental-spf-wait"] | default(200) }}
            {% if 'lsa-generate' in instance_spec.timers %}
            lsa-generate:
              lsa-initial-wait: {{ instance_spec.timers["lsa-generate"]["lsa-initial-wait"] | default(100) }}
              lsa-second-wait: {{ instance_spec.timers["lsa-generate"]["lsa-second-wait"] | default(200) }}
              max-lsa-wait: {{ instance_spec.timers["lsa-generate"]["max-lsa-wait"] | default(1000) }}
            {% endif %}
            {% if 'spf-wait' in instance_spec.timers %}
            spf-wait:
              spf-initial-wait: {{ instance_spec.timers["spf-wait"]["spf-initial-wait"] | default(100) }}
              spf-second-wait: {{ instance_spec.timers["spf-wait"]["spf-second-wait"] | default(200) }}
              spf-max-wait: {{ instance_spec.timers["spf-wait"]["spf-max-wait"] | default(1000) }}
            {% endif %}
          {% endif %}
          area:
          {% for area, area_spec in instance_spec.area.items() %}
          - area-id: {{ area }}
            interface:
            {% for iface, iface_spec in area_spec.interfaces.items() %}
            - interface-name: {{ iface }}
              {% if iface_spec['interface-type'] is defined %}
              interface-type: {{ iface_spec['interface-type'] }}
              {% endif %}
              {% if iface_spec.passive is defined and iface_spec.passive %}
              passive: "true"
              {% endif %}
              hello-interval: {{ iface_spec['hello-interval']|default(10) }}
              dead-interval: {{ iface_spec['dead-interval']|default(40) }}
              failure-detection:
                enable-bfd: {{ iface_spec['enable-bfd']|default(False) }}
            {% else %}
            []
            {% endfor %}
          {% else %}
          []
          {% endfor %}
        {% else %}
        []
        {% endfor %}
      {% endif %}
  {% endif %}

{% endif %}
{% endfor %}
