- name: Verify binfile filename matches expected pattern
  ansible.builtin.assert:
    that:
      - binfile is ansible.builtin.regex('srlinux-(\\d+\\.\\d+\\.\\d+-\\d+)\\.bin$')

- name: Get version info
  nokia.srlinux.get:
    paths:
      - path: /platform/control[slot=A]/software-version
        datastore: state
  register: info_pre

- name: Set facts
  ansible.builtin.set_fact:
    pre_version: "{{ info_pre.result[0] | ansible.builtin.regex_replace('^v(\\d+\\.\\d+\\.\\d+-\\d+)-g[a-fA-F0-9]+$', '\\1') }}"
    binfile_version: "{{ binfile | ansible.builtin.regex_replace('.*srlinux-(\\d+\\.\\d+\\.\\d+-\\d+)\\.bin$', '\\1') }}"
  failed_when: info_pre.result[0] is not ansible.builtin.regex('^v(\\d+\\.\\d+\\.\\d+-\\d+)-g[a-fA-F0-9]+$')

- name: Set facts
  ansible.builtin.set_fact:
    is_upgrade: "{{ pre_version is ansible.builtin.version(binfile_version, '<') }}"
    is_downgrade: "{{ pre_version is ansible.builtin.version(binfile_version, '>') }}"

- name: Print current version
  ansible.builtin.debug:
    msg: "{% if is_upgrade %}Upgrade from version {% elif is_downgrade %}Downgrade from version {% else %}No upgrade required. Current version {% endif %}{{ pre_version }} {% if is_upgrade or is_downgrade %}to version {% else %}is the same as requested version {% endif %}{{ binfile_version }}."

- name: Check system state before upgrade
  nokia.srlinux.get:
    paths:
      - path: /platform
        datastore: state
      - path: /network-instance[name=default]
        datastore: state
  register: pre_status
  failed_when: pre_status.result is not system_ready
  when: pre_checks | default(true) | bool

- name: Verify startup config is up to date
  nokia.srlinux.cli:
    commands:
      - diff startup
  register: up2datecheck
  failed_when: "'text' in up2datecheck.result[0]"
  when:
    - pre_checks | default(true) | bool
    - is_upgrade

- name: Upgrade
  when: is_upgrade or is_downgrade
  block:
  - name: Prepare HTTP transfer
    vars:
      ansible_connection: ssh
      ansible_user: linuxadmin
      ansible_ssh_args: -oUserKnownHostsFile=/dev/null -oStrictHostKeyChecking=false
    when: binfile is ansible.builtin.regex('^https?://')
    block:
      - name: Test binfile url accessibility
        ansible.builtin.uri:
          method: HEAD
          url: "{{ binfile }}"

      - name: Remove remote binfile
        ansible.builtin.file:
          state: absent
          dest: "/tmp/{{ binfile | ansible.builtin.basename }}"

  - name: Transfer local binfile
    vars:
      ansible_connection: ssh
      ansible_user: linuxadmin
      ansible_ssh_args: -oUserKnownHostsFile=/dev/null -oStrictHostKeyChecking=false
    when: binfile is not ansible.builtin.regex('^https?://')
    block:
      - name: Test binfile existance
        ansible.builtin.stat:
          path: "{{ binfile }}"
        delegate_to: localhost
        run_once: true
        register: localbinfile
        failed_when: localbinfile.stat.exists is not defined or not localbinfile.stat.exists or localbinfile.stat.isreg is not defined or not localbinfile.stat.isreg
        vars:
          ansible_connection: local

      - name: Copy binfile
        ansible.builtin.copy:
          src: "{{ binfile }}"
          dest: "/tmp/{{ binfile | ansible.builtin.basename }}"

      - name: Verify remote binfile
        ansible.builtin.stat:
          path: "/tmp/{{ binfile | ansible.builtin.basename }}"
        register: remotebinfile
        failed_when: remotebinfile.stat.exists is not defined or not remotebinfile.stat.exists or remotebinfile.stat.isreg is not defined or not remotebinfile.stat.isreg or localbinfile.stat.checksum != remotebinfile.stat.checksum

  - name: Backup startup configuration prior to upgrade
    vars:
      ansible_connection: ssh
      ansible_user: linuxadmin
      ansible_ssh_args: -oUserKnownHostsFile=/dev/null -oStrictHostKeyChecking=false
    ansible.builtin.copy:
      remote_src: true
      src: "/etc/opt/srlinux/config.json"
      # dest: "/home/{{ ansible_user }}/config.json_{{ pre_version }}.bak"
      dest: "/etc/opt/srlinux/config.json_{{ pre_version }}.bak"

  - name: Deploy new software version
    vars:
      ansible_command_timeout: 900
    nokia.srlinux.cli:
      commands:
        - "tools system deploy-image {% if binfile is ansible.builtin.regex('^https?://') %}{{ binfile }}{% else %}/tmp/{{ binfile | ansible.builtin.basename }}{% endif %}"

  - name: Reboot
    nokia.srlinux.cli:
      commands:
        - "tools platform chassis reboot delay 2"

  - name: Reset persistent connection
    ansible.builtin.meta: clear_facts

  - name: Wait for reboot to be executed
    ansible.builtin.pause:
      seconds: 10
    delegate_to: localhost

  - name: Wait for system to become ready again
    nokia.srlinux.get:
      paths:
        - path: /platform
          datastore: state
        - path: /network-instance[name=default]
          datastore: state
    register: post_status
    delay: 10
    retries: 100
    until: post_status.result is system_ready(pre_status.result | default(None))

  - name: Wait for network to stabilize again
    ansible.builtin.pause:
      seconds: "{{ stabilization_period | default(60) | int }}"
    when: stabilization_period | default(60) | int > 0
    delegate_to: localhost

  - name: Get version info
    nokia.srlinux.get:
      paths:
        - path: /platform/control[slot=A]/software-version
          datastore: state
    register: info_post

  #- name: Verify save of startup config is required
  #  nokia.srlinux.cli:
  #    commands:
  #      - diff startup
  #  register: requiresave
  #  when: save_startup | default(false) | bool

  #- name: Save startup config if requested and required
  #  nokia.srlinux.cli:
  #    commands:
  #      - save startup
  #  register: requiresave
  #  when: save_startup | default(false) | bool and 'text' in requiresave

  - name: Set facts
    ansible.builtin.set_fact:
      post_version: "{{ info_post.result[0] | ansible.builtin.regex_replace('^v(\\d+\\.\\d+\\.\\d+-\\d+)-g[a-fA-F0-9]+$', '\\1') }}"
    failed_when: info_post.result[0] is not ansible.builtin.regex('^v(\\d+\\.\\d+\\.\\d+-\\d+)-g[a-fA-F0-9]+$')

  - name: Print new version
    ansible.builtin.debug:
      msg: "{% if is_upgrade %}Upgrade {% elif is_downgrade %}Downgrade {% endif %}from version {{ pre_version }} to version {{ post_version }} completed."
    failed_when: binfile_version != post_version

  - name: Remove remote binfile
    vars:
      ansible_connection: ssh
      ansible_user: linuxadmin
      ansible_ssh_args: -oUserKnownHostsFile=/dev/null -oStrictHostKeyChecking=false
    when: binfile is not ansible.builtin.regex('^https?://')
    ansible.builtin.file:
      state: absent
      dest: "/tmp/{{ binfile | ansible.builtin.basename }}"
