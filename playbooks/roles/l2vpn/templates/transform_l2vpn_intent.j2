#jinja2: lstrip_blocks: "True"
{% set macvrf = namespace()                                             %}
{% set macvrf.svc = {}                                                  %}
{% for svc, svc_spec in l2vpn.items()                                   %}
{%      set itf_list = []                                               %}
{%      if 'interface_list' in svc_spec                                 %}
{%          if inventory_hostname in svc_spec.interface_list | default({}, True) %}
{%              for itf in svc_spec.interface_list[inventory_hostname]      %}
{%                  set _ = itf_list.append(itf)                            %}
{%              endfor                                                      %}
{%          endif                                                       %}
{%      endif                                                           %}
{%      for tag in svc_spec.interface_tags | default([], True)          %}
{%          for itf, itf_spec in interfaces.items()                     %}
{%              if tag in itf_spec.tags | default([], True)             %}
{%                  set _ = itf_list.append(itf)                        %}
{%              endif                                                   %}
{%          endfor                                                      %}
{%      endfor                                                          %}
{%      if itf_list | length > 0                                        %}
{%          set macvrf.svc = macvrf.svc | combine( { svc: {'itfs': itf_list}}, recursive=True) %}
{%      endif                                                           %}
{% endfor                                                               %}

{% if macvrf.svc | length > 0                                           %} 
network_instance: 
{%      for svc in macvrf.svc                                           %}
    {{ svc }}:
{%          set svc_spec = l2vpn[svc]                                   %}
        _state: {{ svc_spec._state | default('present') }}
{%          if svc_spec.vlan == 'untagged'                              %}
{%              set subif_idx = 0                                       %}
{%          else                                                        %}
{%              set subif_idx = svc_spec.vlan                           %}
{%          endif                                                       %}
        interfaces:
{%          for itf in macvrf.svc[svc]['itfs'] | default([])            %}
        - {{ itf }}.{{ subif_idx }}
{%          endfor                                                      %}
        description: {{ svc_spec.description | default("no description") }}
        type: {{ svc_spec.type | default('mac-vrf') }}
{%          if svc_spec.proxy_arp | default(false)                      %}
        mac_learning:
            admin_state: enable
            age_time: {{ svc_spec.mac_age_time | default(300) }}
        mac_limit: {{ svc_spec.mac_limit | default(250) }}
        proxy_arp:
            admin_state: enable
            age_time: {{ svc_spec.proxy_arp_age_time | default(300) }}
{%          endif                                                       %}
        vxlan_interface:
            - vxlan1.{{svc_spec.id}}
        protocols:
            bgp_evpn:
                vxlan_interface: vxlan1.{{ svc_spec.id }}
                evi: {{ svc_spec.id }}
            bgp_vpn:
                export_rt: {{svc_spec.export_rt | default('100:%s'|format(svc_spec.id)) }}
                import_rt: {{svc_spec.import_rt | default('100:%s'|format(svc_spec.id)) }}
{%      endfor                                                          %}

subinterface:
{%      set acls_v4_in = []                                             %}
{%      set acls_v4_out = []                                            %}
{%      for svc in macvrf.svc                                           %}
{%          set svc_spec = l2vpn[svc]                                   %}
{%          if svc_spec.vlan == 'untagged'                              %}
{%              set subif_idx = 0                                       %}
{%          else                                                        %}
{%              set subif_idx = svc_spec.vlan                           %}
{%          endif                                                       %}
{%          if svc_spec.acl_v4_in is defined                            %}
{%              set acls_v4_in = acls_v4_in + svc_spec.acl_v4_in        %}
{%          endif                                                       %}
{%          if svc_spec.acl_v4_out is defined                           %}
{%              set acls_v4_out = acls_v4_out + svc_spec.acl_v4_out     %}
{%          endif                                                       %}
{%          for itf in macvrf.svc[svc]['itfs']                          %}
    {{ itf }}.{{ subif_idx }}:
        _state: {{ svc_spec._state|default('present') }}
        type: bridged
        vlan: {{ svc_spec.vlan }}
        acl:
            in:
                ipv4: {{ acls_v4_in }}
            out:
                ipv4: {{ acls_v4_out }}
{%          endfor                                                      %}
{%      endfor                                                          %}
interfaces:
{%      for svc in macvrf.svc                                           %}
{%      set svc_spec = l2vpn[svc]                                       %}
{%          for itf in macvrf.svc[svc]['itfs']                          %}
    {{ itf }}:
        _state: {{ svc_spec._state|default('present') }}
        vlan_tagging: true
{%          endfor                                                      %}
{%      endfor                                                          %}
tunnel_interface:
    vxlan1:
{%      for svc in macvrf.svc                                           %}
{%          set svc_spec = l2vpn[svc]                                   %}
        {{svc_spec.id}}:
            _state: {{ svc_spec._state|default('present') }}
            type: bridged
            ingress_vni: {{ svc_spec.id }}
{%      endfor                                                          %}
{% endif                                                                %}
